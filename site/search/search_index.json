{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"En route vers Mkdocs ! \u00e0 22h52 On teste \u2693\ufe0e Belle page d'accueil","title":"Home"},{"location":"index.html#on-teste","text":"Belle page d'accueil","title":"On teste"},{"location":"Theme0_Bases_de_Python/cours.html","text":"1. Variables et affectation \u2693\ufe0e 1.1 Stocker une valeur dans une variable \u2693\ufe0e La m\u00e9moire d'un ordinateur peut-\u00eatre per\u00e7ue comme un ensemble de tiroirs. \u00c9crire l'instruction : 1 a = 2 va provoquer chez l'ordinateur (en simplifiant beaucoup) le comportement suivant : - Est-ce que je poss\u00e8de d\u00e9j\u00e0 un tiroir appel\u00e9 a ? - si oui, je me positionne devant. - si non, je cr\u00e9e un tiroir appel\u00e9 a . J'ouvre le tiroir et j'y d\u00e9pose la valeur num\u00e9rique 2. Si le tiroir contenait d\u00e9j\u00e0 une valeur, celle-ci dispara\u00eet. On dit souvent qu'elle est \u00e9cras\u00e9e . Le sens du signe = n'est donc pas du tout le m\u00eame qu'en math\u00e9matiques. On dit que c'est un signe d' affectation . L'\u00e9criture a = 2 signifie donc a \u2190 2. \u26a0 Attention : ici, nous avons stock\u00e9 un nombre (le nombre 2) dans la variable a . Mais une variable peut contenir une phrase, une liste de nombres, une image...beaucoup d'objets de type diff\u00e9rent. 1.2 R\u00e9cup\u00e9rer la valeur stock\u00e9e dans une variable \u2693\ufe0e 1.2.1 Dans un script \u2693\ufe0e Dans un script Python, pour afficher le contenu d'une variable, on utilisera la fonction print() . 1 2 3 4 a = 2 maison = \"Serdaigle\" print ( a ) print ( maison ) renverra la sortie suivante : 1 2 2 'Serdaigle' \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f 1.2.2 En console \u2693\ufe0e Dans la console interactive de Python, c'est encore plus simple, il suffit d'\u00e9crire le nom de la variable et d'appuyer sur Entr\u00e9e. 1 2 3 4 5 6 7 8 >>> a 2 >>> maison 'Serdaigle' >>> b Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > NameError : name 'b' is not defined >>> Bien s\u00fbr, il faut que la variable ait \u00e9t\u00e9 cr\u00e9\u00e9e au pr\u00e9alable... sinon Python renvoie un message d'erreur. 1.3 Modifier le contenu d'une variable \u2693\ufe0e 1.3.1 \u00c9craser une ancienne valeur \u2693\ufe0e Comme d\u00e9j\u00e0 \u00e9voqu\u00e9, affecter une nouvelle valeur dans une variable d\u00e9j\u00e0 existante \u00e9crasera l'ancienne valeur. C'est tr\u00e8s pratique, mais parfois dangereux. 1 2 3 4 5 6 >>> a = \"mon mot de passe ultrasecret\" >>> a \"mon mot de passe ultrasecret\" >>> a = 3 >>> a 3 1.3.2 Utiliser des variables pour calculer de nouvelles variables \u2693\ufe0e 1 2 3 4 AB = 3 AC = 4 BC = ( AB ** 2 + AC ** 2 ) ** 0.5 print ( \"l'hypot\u00e9nuse mesure\" , BC , \"centim\u00e8tres\" ) Remarque : en Python, la puissance s'obtient par ** . La racine carr\u00e9e est une puissance 0.5 . 1.3.3 Modifier une variable \u00e0 partir d'elle-m\u00eame \u2693\ufe0e L'instruction 1 a = a + 1 \u00e9crit une \u00e9galit\u00e9 math\u00e9matique fort peu int\u00e9ressante (toujours fausse, car elle est \u00e9quivalente \u00e0 l'\u00e9galit\u00e9 0 = 1), mais est une \u00e9criture informatique tr\u00e8s utile : la variable a se modifie \u00e0 partir d'elle-m\u00eame. 1 2 3 a = 10 a = a + 1 print ( a ) renverra 1 11 La compr\u00e9hension de cette \u00e9criture est essentielle, ainsi que de comprendre la diff\u00e9rence entre le point de vue math\u00e9matique et informatique d'une m\u00eame \u00e9criture. 1.3.4 Inverser deux variables \u2693\ufe0e Imaginons les variables suivantes : 1 2 maisonHarry = \"Serpentard\" maisonMalfoy = \"Gryffondor\" Il semblerait qu'une erreur se soit gliss\u00e9e dans ces d\u00e9clarations de variables... Mais comment faire pour inverser les valeurs ? \u25b8 M\u00e9thode na\u00efve 1 2 maisonHarry = maisonMalfoy maisonMalfoy = maisonHarry \u00e0 l'arriv\u00e9e, on se retrouve avec 1 2 3 4 >>> maisonHarry 'Gryffondor' >>> maisonMalfoy 'Gryffondor' En effet, la variable maisonHarry a \u00e9t\u00e9 \u00e9cras\u00e9e... et on ne peut plus retrouver sa valeur pour la donner \u00e0 maisonMalfoy . \u25b8 La solution universelle Nous allons passer par une variable temporaire qui nous permettra de stocker la valeur \u00e9cras\u00e9e. 1 2 3 4 5 6 7 8 maisonHarry = \"Serpentard\" maisonMalfoy = \"Gryffondor\" # on proc\u00e8de \u00e0 l'\u00e9change t = maisonHarry maisonHarry = maisonMalfoy maisonMalfoy = t Ainsi, 1 2 3 4 >>> maisonHarry 'Gryffondor' >>> maisonMalfoy 'Serpentard' \u25b8 La solution \u00abpythonesque\u00bb Chaque langage de programmation ayant ses particularit\u00e9s, Python propose une syntaxe particuli\u00e8rement agr\u00e9able pour pouvoir faire l'\u00e9change de deux variables sans faire intervenir une variable temporaire : 1 2 3 4 5 a = 2 b = 5 # on proc\u00e8de \u00e0 l'\u00e9change a , b = b , a Ainsi, 1 2 3 4 >>> a 5 >>> b 2 Les variables ont bien \u00e9t\u00e9 \u00e9chang\u00e9es. Remarque : Python ne fait que nous faciliter le travail. Il a d\u00fb lui-m\u00eame cr\u00e9er une variable temporaire pour stocker la variable a avant de l'\u00e9craser : la simultan\u00e9it\u00e9 n'existe pas en informatique ! 1.4 Jouer avec les variables \u2693\ufe0e L'objet de l'activit\u00e9 est de prendre un code pr\u00e9-existant, produisant une animation graphique, et de le modifier petit \u00e0 petit pour comprendre le r\u00f4le de chaque \u00e9l\u00e9ment. Lien vers le code et l'animation en ligne 1.4.1 Quelques indications sur le code d'origine \u2693\ufe0e background(r,g,b) : l'arri\u00e8re-plan sera de la couleur (r,g,b) , o\u00f9 r , g et b sont des nombres compris entre 0 et 255, d\u00e9terminant les composantes rouge, verte et bleue de la couleur totale. Voir ici . size(x,y) : l'espace de dessin mesurera x pixels de large sur y pixels de haut. frameRate(n) : l'animation sera rafra\u00eechie n fois par seconde. stroke(r,g,b) : la couleur des futurs trac\u00e9s (lignes, cercles...) sera la couleur (r,g,b) randint(a,b) : renvoie un nombre pseudo-al\u00e9atoire entre a et b . line(xA,yA,xB,yB) : trace une ligne entre les points (xA,yA) et (xB,yB) . 1.4.2 Manipulations \u00e0 effectuer \u2693\ufe0e Faire en sorte qu'il suffisse de modifier les valeurs de largeur et hauteur pour que le dessin s'adapte \u00e0 la nouvelle taille. Faire en sorte que les lignes trac\u00e9es soient de couleur al\u00e9atoire. 1.4.3 Pour aller plus loin \u2693\ufe0e strokeWeight(n) : le trac\u00e9 suivant aura une \u00e9paisseur de n pixels. fill(r,b,g) : la figure g\u00e9om\u00e9trique suivante sera remplie de la couleur (r,g,b) . circle(x, y, r) : trace un cercle de centre (x,y et de rayon r . mouseX et mouseY : renvoient respectivement l'abscisse et l'ordonn\u00e9e de la souris. (beaucoup) d'autres possibilit\u00e9s \u00e0 l'adresse https://py.processing.org/tutorials/ . 1.5 Vers les tests... \u2693\ufe0e Rendez-vous \u00e0 l'adresse https://trinket.io/library/trinkets/d9e1c58ea0 L'objectif est de faire bouger la balle... puis la faire rebondir ! 1.5.1 Mouvement de la balle \u2693\ufe0e Pour l'instant la balle est statique. Du moins elle appara\u00eet statique, mais elle en fait redessinn\u00e9e au m\u00eame endroit 25 fois par seconde ! 1. Comment faire en sorte qu'\u00e0 chaque tour de boucle (25 fois par seconde donc) la balle ne soit pas redessin\u00e9e au m\u00eame endroit, mais l\u00e9g\u00e8rement d\u00e9cal\u00e9e vers la droite ? 2. R\u00e9soudre le probl\u00e8me de superposition des anciennnes balles afin de donner l'illusion d'un mouvement 3. Stocker dans une variable appel\u00e9e dx le d\u00e9calage de l'abscisse. 1.5.2 Rebond de la balle \u2693\ufe0e Pour l'instant, notre balle s'enfuit d\u00e9sesp\u00e9r\u00e9ment... Comment d\u00e9tecter qu'elle sortie de son aire de jeu ? 2. Instructions conditionnelles \u2693\ufe0e Un ordinateur ne fait pas que stocker des valeurs dans des variables et les faire \u00e9voluer. Il effectue aussi des tests pour d\u00e9clencher (ou pas) d'autres actions. On parle alors d' instructions conditionnelles . 2.1 Premier test \u00e9l\u00e9mentaire \u2693\ufe0e La syntaxe d'un test en Python est la suivante : 1 2 if condition : instruction Remarquez bien : - les deux points qui suivent la condition : ils signalent l'ouverture d'un bloc de code, celui qui sera ex\u00e9cut\u00e9 si la condition est valide. - le l\u00e9ger d\u00e9calage (appel\u00e9 indentation ) de la ligne (ou les lignes) contenant l'instruction \u00e0 ex\u00e9cuter. Cette indentation n'est pas \u00abd\u00e9corative\u00bb : elle est cruciale pour que Python comprenne quelle partie de code doit \u00eatre ex\u00e9cut\u00e9e ou pas. Exemple 1 2 3 heure = 13 if heure > 12 : print ( \"j'ai faim\" ) Ce code va renvoyer j'ai faim car la condition est valid\u00e9e. On dit que la condition est \u00abvraie\u00bb. 2.1.2 Le retour de la balle fuyante \u2693\ufe0e D\u00e9tectez que la balle est sortie en faisant appara\u00eetre le mot \"sortie...\" en console (le mot appara\u00eetra sous la zone de dessin). Modifiez le code pour que la balle reparte dans l'autre sens au lieu de s'enfuir. Faites rebondir la balle sur les deux murs Faites en sorte que la balle n'ait plus qu'un simple mouvement lat\u00e9ral mais un mouvement \u00abde travers\u00bb G\u00e9rez les rebonds, rajoutez de l'al\u00e9atoire... Voir un exemple de correction, ici : https://trinket.io/library/trinkets/05b7d7f7c3 ... et amusez-vous \u00e0 modifier ce code ! 3. Les fonctions en Python \u2693\ufe0e 3.1 Principe g\u00e9n\u00e9ral : \u00e0 quoi sert une fonction ? \u2693\ufe0e L'id\u00e9e principale qu'il faut garder en t\u00eate est celle-ci : une fonction est un raccourci , permettant une utilisation simple et rapide d'un processus r\u00e9p\u00e9titif. Par exemple, en Scratch, si on sait que l'on va avoir \u00e0 tracer beaucoup de carr\u00e9s, on cr\u00e9e un bloc carre : Il est \u00e0 noter que lorsqu'on cr\u00e9\u00e9 le bloc carre , rien ne se passe, rien n'est trac\u00e9. Ce n'est que lorqu'on va se servir de ce bloc (on dira qu'on appelle le bloc) qu'une action aura lieu. Pour faire un parall\u00e8le avec la vie courante, vous avez tous appris un jour \u00e0 faire vos lacets. C'est une fonction (un ensemble de gestes et de techniques) qui est disponible et dont vous ne vous servez que lorsque vous en avez besoin (quand vos lacets sont d\u00e9faits). 3.2 Premi\u00e8res fonctions en Python. \u2693\ufe0e Une fonction en Python se d\u00e9clare par le mot cl\u00e9 def . 1 2 3 4 def hymne_anglais (): print ( \"God save our gracious Queen\" ) print ( \"Long live our noble Queen\" ) print ( \"God save our Queen\" ) \u00c0 remarquer : - les parenth\u00e8ses \u00e0 la fin du nom de la fonction (indispensables) : elles contiendront plus tard les param\u00e8tres de la fonction. - le deux points : \u00e0 la fin de la d\u00e9claration du nom de la fonction. Ils vont d\u00e9clencher une indentation automatique du reste du corps de la fonction. Utilisation : 1 2 3 4 >>> hymne_anglais() God save our gracious Queen Long live our noble Queen God save our Queen Cette fonction n'a aucun param\u00e8tre d'entr\u00e9e . Elle affichera toujours la m\u00eame chose lorsqu'on l'appellera. 3.3 Param\u00e8tres d'une fonction \u2693\ufe0e L'inconv\u00e9nient majeur des fonctions pr\u00e9c\u00e9dentes est qu'elles produisent toujours la m\u00eame chose. Le carr\u00e9 en Scratch fera toujours 50 pixels de c\u00f4t\u00e9, l'hymne affich\u00e9 sera toujours l'hymne anglais... Pour am\u00e9liorer ceci, il est possible de donner \u00e0 la fonction un (ou plusieurs) param\u00e8tre (s). La fonction carr\u00e9() comporte maintenant un param\u00e8tre, qu'on a appel\u00e9 cot\u00e9 , mais qu'on aurait pu appeler n , x , ou djhfidshflsdm . Cela n'a aucune influence sur le fonctionnement du code. Mais \u00e7a en a une sur la compr\u00e9hension de celui-ci ! On choisira donc toujours un nom explicite. Lorsqu'on appelle ensuite la fonction carre(100) , la fonction est ex\u00e9cut\u00e9e avec \u00e0 la place de la variable cot\u00e9 la valeur 100 . Elle trace donc un carr\u00e9 de c\u00f4t\u00e9 100. En Python, cr\u00e9ons par exemple une fonction hymne(pays) : 1 2 3 4 5 6 7 8 9 10 def hymne ( pays ): if pays == \"ANG\" : print ( \"God save our gracious Queen\" ) print ( \"Long live our noble Queen\" ) print ( \"God save our Queen\" ) if pays == \"FRA\" : print ( \"Allons enfants de la patri-i-euh\" ) print ( \"Le jour de gloire est arriv\u00e9\" ) Notre fonction comporte maintenant un param\u00e8tre qui va influer sur l'action de la fonction : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 >>> hymne(\"ANG\") God save our gracious Queen Long live our noble Queen God save our Queen >>> hymne(\"FRA\") Allons enfants de la patri-i-euh Le jour de gloire est arriv\u00e9 >>> hymne(\"USA\") >>> hymne(5) >>> \u00c0 remarquer : - L'utilisateur de la fonction peut utiliser la fonction hymne() avec des valeurs du param\u00e8tre pays non pr\u00e9vus par le programmeur. Dans notre cas, cela n'est pas grave (il ne se passe rien), mais parfois cela peut provoquer une erreur. 3.4 Fonctions utilisant d'autres fonctions \u2693\ufe0e Le code pr\u00e9c\u00e9dent peut aussi s'\u00e9crire de cette mani\u00e8re : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def hymne_anglais (): print ( \"God save our gracious Queen\" ) print ( \"Long live our noble Queen\" ) print ( \"God save our Queen\" ) def hymne_francais (): print ( \"Allons enfants de la patri-ie-euh\" ) print ( \"Le jour de gloire est arriv\u00e9\" ) def hymne ( pays ): if pays == \"ANG\" : hymne_anglais () if pays == \"FRA\" : hymne_francais () Ce type d'\u00e9criture de code (qu'on appellera \u00e9criture modulaire ) est une bonne habitude \u00e0 prendre car elle s\u00e9pare les diff\u00e9rentes actions en fonctions sp\u00e9cifiques. Si je dois rajouter un vers \u00e0 l'hymne fran\u00e7ais, je vais uniquement toucher \u00e0 la fonction hymne_francais() , et pas aux autres fonctions qui ne sont pas concern\u00e9es. 3.5 Fonctions renvoyant une valeur \u2693\ufe0e \u26a0 Tr\u00e8s important \u26a0 Jusqu'\u00e0 pr\u00e9sent, les fonctions utilis\u00e9es \u00e9taient uniquement des \u00abraccourcis\u00bb permettant de mieux structurer le code et d'\u00e9viter les r\u00e9p\u00e9titions. Or, les fonctions peuvent \u00eatre encore plus int\u00e9ressantes lorsqu'on comprend qu'elles peuvent renvoyer une valeur . On s'approche alors de la d\u00e9finition math\u00e9matique du concept de fonction. Le mot-cl\u00e9 pour le renvoi d'une valeur est l'instruction return . Exemple : 1 2 3 def aucarr\u00e9 ( n ): p = n * n return p \u00c0 l'utilisation, cette fonction ne semble pas pour l'instant diff\u00e9rente des pr\u00e9c\u00e9dentes : 1 2 3 >>> aucarr\u00e9(4) 16 >>> Ce qu'il faut absolument comprendre, c'est que aucarr\u00e9(4) est en fait un nombre . Et donc, je peux l'utiliser dans des calculs : 1 2 >>> 12 + aucarr\u00e9(5) 37 3.6 Application \u00e0 un exercice classique de math\u00e9matiques \u2693\ufe0e Imaginons deux tarifs A et B pour le prix d'un ticket d'entr\u00e9e au cin\u00e9ma. - Tarif A : 7 \u20ac la place - Tarif B : 13 \u20ac l'abonnement puis 5 \u20ac la place Pour un nombre n d'entr\u00e9es, quel est le tarif le plus avantageux ? Cr\u00e9er une fonction tarif_A(n) qui renvoie le prix pour n entr\u00e9es au tarif A. Cr\u00e9er une fonction tarif_B(n) qui renvoie le prix pour n entr\u00e9es au tarif B. Cr\u00e9er une fonction meilleur_choix(n) qui \u00e9crira \"il faut choisir le tarif A\" ou bien \"il faut choisir le tarif B\" en fonction du tarif le moins cher. Cette fonction ne renverra aucune valeur. Correction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def tarif_A ( n ): p = 7 * n return p def tarif_B ( n ): p = 13 + 5 * n return p def meilleur_choix ( n ): if tarif_A ( n ) < tarif_B ( n ): print ( \"il faut choisir le tarif A\" ) if tarif_A ( n ) > tarif_B ( n ): print ( \"il faut choisir le tarif B\" ) if tarif_A ( n ) == tarif_B ( n ): print ( \"les deux tarifs sont \u00e9quivalents\" )","title":"Cours"},{"location":"Theme0_Bases_de_Python/cours.html#1-variables-et-affectation","text":"","title":"1. Variables et affectation"},{"location":"Theme0_Bases_de_Python/cours.html#11-stocker-une-valeur-dans-une-variable","text":"La m\u00e9moire d'un ordinateur peut-\u00eatre per\u00e7ue comme un ensemble de tiroirs. \u00c9crire l'instruction : 1 a = 2 va provoquer chez l'ordinateur (en simplifiant beaucoup) le comportement suivant : - Est-ce que je poss\u00e8de d\u00e9j\u00e0 un tiroir appel\u00e9 a ? - si oui, je me positionne devant. - si non, je cr\u00e9e un tiroir appel\u00e9 a . J'ouvre le tiroir et j'y d\u00e9pose la valeur num\u00e9rique 2. Si le tiroir contenait d\u00e9j\u00e0 une valeur, celle-ci dispara\u00eet. On dit souvent qu'elle est \u00e9cras\u00e9e . Le sens du signe = n'est donc pas du tout le m\u00eame qu'en math\u00e9matiques. On dit que c'est un signe d' affectation . L'\u00e9criture a = 2 signifie donc a \u2190 2. \u26a0 Attention : ici, nous avons stock\u00e9 un nombre (le nombre 2) dans la variable a . Mais une variable peut contenir une phrase, une liste de nombres, une image...beaucoup d'objets de type diff\u00e9rent.","title":"1.1 Stocker une valeur dans une variable"},{"location":"Theme0_Bases_de_Python/cours.html#12-recuperer-la-valeur-stockee-dans-une-variable","text":"","title":"1.2  R\u00e9cup\u00e9rer la valeur stock\u00e9e dans une variable"},{"location":"Theme0_Bases_de_Python/cours.html#13-modifier-le-contenu-dune-variable","text":"","title":"1.3 Modifier le contenu d'une variable"},{"location":"Theme0_Bases_de_Python/cours.html#14-jouer-avec-les-variables","text":"L'objet de l'activit\u00e9 est de prendre un code pr\u00e9-existant, produisant une animation graphique, et de le modifier petit \u00e0 petit pour comprendre le r\u00f4le de chaque \u00e9l\u00e9ment. Lien vers le code et l'animation en ligne","title":"1.4 Jouer avec les variables"},{"location":"Theme0_Bases_de_Python/cours.html#15-vers-les-tests","text":"Rendez-vous \u00e0 l'adresse https://trinket.io/library/trinkets/d9e1c58ea0 L'objectif est de faire bouger la balle... puis la faire rebondir !","title":"1.5 Vers les tests..."},{"location":"Theme0_Bases_de_Python/cours.html#2-instructions-conditionnelles","text":"Un ordinateur ne fait pas que stocker des valeurs dans des variables et les faire \u00e9voluer. Il effectue aussi des tests pour d\u00e9clencher (ou pas) d'autres actions. On parle alors d' instructions conditionnelles .","title":"2. Instructions conditionnelles"},{"location":"Theme0_Bases_de_Python/cours.html#21-premier-test-elementaire","text":"La syntaxe d'un test en Python est la suivante : 1 2 if condition : instruction Remarquez bien : - les deux points qui suivent la condition : ils signalent l'ouverture d'un bloc de code, celui qui sera ex\u00e9cut\u00e9 si la condition est valide. - le l\u00e9ger d\u00e9calage (appel\u00e9 indentation ) de la ligne (ou les lignes) contenant l'instruction \u00e0 ex\u00e9cuter. Cette indentation n'est pas \u00abd\u00e9corative\u00bb : elle est cruciale pour que Python comprenne quelle partie de code doit \u00eatre ex\u00e9cut\u00e9e ou pas. Exemple 1 2 3 heure = 13 if heure > 12 : print ( \"j'ai faim\" ) Ce code va renvoyer j'ai faim car la condition est valid\u00e9e. On dit que la condition est \u00abvraie\u00bb.","title":"2.1 Premier test \u00e9l\u00e9mentaire"},{"location":"Theme0_Bases_de_Python/cours.html#3-les-fonctions-en-python","text":"","title":"3. Les fonctions en Python"},{"location":"Theme0_Bases_de_Python/cours.html#31-principe-general-a-quoi-sert-une-fonction","text":"L'id\u00e9e principale qu'il faut garder en t\u00eate est celle-ci : une fonction est un raccourci , permettant une utilisation simple et rapide d'un processus r\u00e9p\u00e9titif. Par exemple, en Scratch, si on sait que l'on va avoir \u00e0 tracer beaucoup de carr\u00e9s, on cr\u00e9e un bloc carre : Il est \u00e0 noter que lorsqu'on cr\u00e9\u00e9 le bloc carre , rien ne se passe, rien n'est trac\u00e9. Ce n'est que lorqu'on va se servir de ce bloc (on dira qu'on appelle le bloc) qu'une action aura lieu. Pour faire un parall\u00e8le avec la vie courante, vous avez tous appris un jour \u00e0 faire vos lacets. C'est une fonction (un ensemble de gestes et de techniques) qui est disponible et dont vous ne vous servez que lorsque vous en avez besoin (quand vos lacets sont d\u00e9faits).","title":"3.1 Principe g\u00e9n\u00e9ral : \u00e0 quoi sert une fonction ?"},{"location":"Theme0_Bases_de_Python/cours.html#32-premieres-fonctions-en-python","text":"Une fonction en Python se d\u00e9clare par le mot cl\u00e9 def . 1 2 3 4 def hymne_anglais (): print ( \"God save our gracious Queen\" ) print ( \"Long live our noble Queen\" ) print ( \"God save our Queen\" ) \u00c0 remarquer : - les parenth\u00e8ses \u00e0 la fin du nom de la fonction (indispensables) : elles contiendront plus tard les param\u00e8tres de la fonction. - le deux points : \u00e0 la fin de la d\u00e9claration du nom de la fonction. Ils vont d\u00e9clencher une indentation automatique du reste du corps de la fonction. Utilisation : 1 2 3 4 >>> hymne_anglais() God save our gracious Queen Long live our noble Queen God save our Queen Cette fonction n'a aucun param\u00e8tre d'entr\u00e9e . Elle affichera toujours la m\u00eame chose lorsqu'on l'appellera.","title":"3.2 Premi\u00e8res fonctions en Python."},{"location":"Theme0_Bases_de_Python/cours.html#33-parametres-dune-fonction","text":"L'inconv\u00e9nient majeur des fonctions pr\u00e9c\u00e9dentes est qu'elles produisent toujours la m\u00eame chose. Le carr\u00e9 en Scratch fera toujours 50 pixels de c\u00f4t\u00e9, l'hymne affich\u00e9 sera toujours l'hymne anglais... Pour am\u00e9liorer ceci, il est possible de donner \u00e0 la fonction un (ou plusieurs) param\u00e8tre (s). La fonction carr\u00e9() comporte maintenant un param\u00e8tre, qu'on a appel\u00e9 cot\u00e9 , mais qu'on aurait pu appeler n , x , ou djhfidshflsdm . Cela n'a aucune influence sur le fonctionnement du code. Mais \u00e7a en a une sur la compr\u00e9hension de celui-ci ! On choisira donc toujours un nom explicite. Lorsqu'on appelle ensuite la fonction carre(100) , la fonction est ex\u00e9cut\u00e9e avec \u00e0 la place de la variable cot\u00e9 la valeur 100 . Elle trace donc un carr\u00e9 de c\u00f4t\u00e9 100. En Python, cr\u00e9ons par exemple une fonction hymne(pays) : 1 2 3 4 5 6 7 8 9 10 def hymne ( pays ): if pays == \"ANG\" : print ( \"God save our gracious Queen\" ) print ( \"Long live our noble Queen\" ) print ( \"God save our Queen\" ) if pays == \"FRA\" : print ( \"Allons enfants de la patri-i-euh\" ) print ( \"Le jour de gloire est arriv\u00e9\" ) Notre fonction comporte maintenant un param\u00e8tre qui va influer sur l'action de la fonction : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 >>> hymne(\"ANG\") God save our gracious Queen Long live our noble Queen God save our Queen >>> hymne(\"FRA\") Allons enfants de la patri-i-euh Le jour de gloire est arriv\u00e9 >>> hymne(\"USA\") >>> hymne(5) >>> \u00c0 remarquer : - L'utilisateur de la fonction peut utiliser la fonction hymne() avec des valeurs du param\u00e8tre pays non pr\u00e9vus par le programmeur. Dans notre cas, cela n'est pas grave (il ne se passe rien), mais parfois cela peut provoquer une erreur.","title":"3.3 Param\u00e8tres d'une fonction"},{"location":"Theme0_Bases_de_Python/cours.html#34-fonctions-utilisant-dautres-fonctions","text":"Le code pr\u00e9c\u00e9dent peut aussi s'\u00e9crire de cette mani\u00e8re : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def hymne_anglais (): print ( \"God save our gracious Queen\" ) print ( \"Long live our noble Queen\" ) print ( \"God save our Queen\" ) def hymne_francais (): print ( \"Allons enfants de la patri-ie-euh\" ) print ( \"Le jour de gloire est arriv\u00e9\" ) def hymne ( pays ): if pays == \"ANG\" : hymne_anglais () if pays == \"FRA\" : hymne_francais () Ce type d'\u00e9criture de code (qu'on appellera \u00e9criture modulaire ) est une bonne habitude \u00e0 prendre car elle s\u00e9pare les diff\u00e9rentes actions en fonctions sp\u00e9cifiques. Si je dois rajouter un vers \u00e0 l'hymne fran\u00e7ais, je vais uniquement toucher \u00e0 la fonction hymne_francais() , et pas aux autres fonctions qui ne sont pas concern\u00e9es.","title":"3.4 Fonctions utilisant d'autres fonctions"},{"location":"Theme0_Bases_de_Python/cours.html#35-fonctions-renvoyant-une-valeur","text":"\u26a0 Tr\u00e8s important \u26a0 Jusqu'\u00e0 pr\u00e9sent, les fonctions utilis\u00e9es \u00e9taient uniquement des \u00abraccourcis\u00bb permettant de mieux structurer le code et d'\u00e9viter les r\u00e9p\u00e9titions. Or, les fonctions peuvent \u00eatre encore plus int\u00e9ressantes lorsqu'on comprend qu'elles peuvent renvoyer une valeur . On s'approche alors de la d\u00e9finition math\u00e9matique du concept de fonction. Le mot-cl\u00e9 pour le renvoi d'une valeur est l'instruction return . Exemple : 1 2 3 def aucarr\u00e9 ( n ): p = n * n return p \u00c0 l'utilisation, cette fonction ne semble pas pour l'instant diff\u00e9rente des pr\u00e9c\u00e9dentes : 1 2 3 >>> aucarr\u00e9(4) 16 >>> Ce qu'il faut absolument comprendre, c'est que aucarr\u00e9(4) est en fait un nombre . Et donc, je peux l'utiliser dans des calculs : 1 2 >>> 12 + aucarr\u00e9(5) 37","title":"3.5 Fonctions renvoyant une valeur"},{"location":"Theme1_Photographie_numerique/creation_image_python.html","text":"Cr\u00e9ation d'une image num\u00e9rique en Python \u2693\ufe0e 0. L'environnement logiciel n\u00e9cessaire \u2693\ufe0e 0.1 Option 1 : installer Thonny sur son ordinateur \u2693\ufe0e Rendez vous sur la page https://thonny.org/ T\u00e9l\u00e9chargez et installez la version qui correspond \u00e0 votre syst\u00e8me d'exploitation (Windows, Mac, Linux). Ouvrez Thonny et allez dans Outils / G\u00e9rer les paquets. Dans la zone de recherche, tapez \u00abpillow\u00bb puis cliquez sur \u00abRecherchez sur PyPi\u00bb. Installez le paquet \u00abpillow\u00bb qui vous est propos\u00e9. 0.2 Option 2 : utiliser en ligne le site Basthon \u2693\ufe0e Rendez-vous sur la page https://console.basthon.fr/ Remarques : - Pour travailler avec un fichier (par exemple une image) de votre ordinateur, cliquez sur le bouton - Pour avoir un \u00abretour graphique\u00bb (notamment pour voir une image affich\u00e9e en fin de programme par l'instruction img.show() ), cliquez sur le bouton . 1. Premier code \u2693\ufe0e 1.1 Le code \u00e0 recopier \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from PIL import Image img = Image . new ( \"RGB\" ,( 300 , 200 )) for x in range ( 300 ): for y in range ( 200 ): img . putpixel (( x , y ),( 150 , 150 , 150 )) for a in range ( 100 , 200 ): for b in range ( 50 , 70 ): img . putpixel (( a , b ),( 0 , 212 , 230 )) for k in range ( 250 , 280 ): img . putpixel (( k , 120 ),( 204 , 15 , 0 )) for z in range ( 100 , 150 ): img . putpixel (( 50 , z ),( 4 , 152 , 20 )) img . save ( \"mon_dessin.png\" ) - Copiez-collez ou recopiez le code suivant (si vous \u00eates - pass\u00e9s par repl.it, il est d\u00e9j\u00e0 \u00e9crit). - Enregistrez votre travail dans un fichier (rep\u00e9rez bien \u00e0 quel endroit ce fichier se trouve) - Ex\u00e9cutez ce code (F5 sur Thonny). Un fichier mon_dessin.png est cr\u00e9\u00e9 dans le m\u00eame dossier que votre code python. Votre image cr\u00e9\u00e9e doit \u00eatre celle-ci : 1.2 Aide \u00e0 la compr\u00e9hension du code \u2693\ufe0e 2. Des fonctions pour de jolies images ! \u2693\ufe0e Pour l'instant nos pixels sont tous de la m\u00eame couleur, et c'est un peu d\u00e9cevant... Nous allons repartir avec le code ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from PIL import Image largeur = 600 hauteur = 600 img = Image . new ( \"RGB\" ,( largeur , hauteur )) for x in range ( largeur ): for y in range ( hauteur ): r = 255 g = 255 b = 255 img . putpixel (( x , y ),( r , g , b )) img . save ( \"exemple.png\" ) L'image produite est : blanche. 2.1 Un peu (beaucoup) d'al\u00e9atoire \u2693\ufe0e Au d\u00e9but du code, rajoutez la ligne 1 from random import randint Cela nous donne le droit d'utiliser la fonction randint() , qui re\u00e7oit deux nombres entiers en param\u00e8tres, et qui renvoie un nombre pseudo-al\u00e9atoire entre ces deux nombres. Voil\u00e0 un simulateur de d\u00e9 \u00e0 6 faces : 1 2 >>> randint(1,6) 4 Exercice 1 Dans le code pr\u00e9c\u00e9dent, remplacer la valeur de chaque composante RGB (actuellement \u00e0 255) par un nombre al\u00e9atoire entre 0 et 255. \u00c0 quoi ressemble l'image produite ? (on appelle cela du bruit blanc ) 2.2 Les math\u00e9matiques au service de l'esth\u00e9tique \u2693\ufe0e Nous souhaiterions que la teinte des pixels change en fonction des coordonn\u00e9es (x,y) de celui-ci. Pour cela, nous allons, par exemple, essayer le code suivant : 1 2 3 4 5 6 7 8 9 def f ( x , y ): return x + y for x in range ( largeur ): for y in range ( hauteur ): r = f ( x , y ) g = 255 b = 255 img . putpixel (( x , y ),( r , g , b )) Essayez de comprendre pourquoi l'image poss\u00e8de une grande zone de blanc. Un op\u00e9rateur important : % Nous allons avoir recours \u00e0 un op\u00e9rateur math\u00e9matique tr\u00e8s important en programmation, l'op\u00e9rateur % , appel\u00e9 \u00abmodulo\u00bb : a % b renvoie le reste de la division euclidienne de a par b . Exemple : 1 2 3 4 5 6 >>> 13 % 5 3 >>> 9 % 7 2 >>> 260 % 255 5 Cet op\u00e9rateur est tr\u00e8s souvent utilis\u00e9 pour \u00e9viter \u00e0 une variable de d\u00e9passer une certaine borne. Ainsi, si z est un nombre entier, z % 255 sera un nombre toujours compris dans l'intervalle [0;254] Exercice 2 Reprenez le code pr\u00e9c\u00e9dent et utilisez le modulo intelligemment. Exercice 3 Modifiez la fonction f (faites parler votre imagination) et observez les r\u00e9sultats obtenus. Exercice 3 Modifiez la fonction f afin qu'elle renvoie la distance du point de coordonn\u00e9es (x,y) avec le centre de l'image. (modulo 255 bien s\u00fbr). Admirez votre cr\u00e9ation ! 3. Modifier la couleur d'une image existante \u2693\ufe0e Nous allons jouer avec les pixels de l'image ci-dessous. T\u00e9l\u00e9chargez l'image ci-dessus (par un clic-droit puis Enregistrez l'image ). Ouvrez Thonny, et enregistrez votre fichier code_fleur.py dans le m\u00eame r\u00e9pertoire que l'image fleur.jpg que vous venez de t\u00e9l\u00e9charger. Copiez-collez ensuite ce code : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from PIL import Image img_base = Image . open ( \"fleur.jpg\" ) img_modif = Image . new ( \"RGB\" , img_base . size ) largeur = img_base . width hauteur = img_base . height for x in range ( largeur ): for y in range ( hauteur ): pixel = img_base . getpixel (( x , y )) r = pixel [ 0 ] g = pixel [ 1 ] b = pixel [ 2 ] new_r = r new_g = g new_b = b new_pixel = ( new_r , new_g , new_b ) img_modif . putpixel (( x , y ), new_pixel ) img_modif . show () img_modif . save ( \"new_fleur.jpg\" ) Ex\u00e9cutez ce code (F5) et observez l'image cr\u00e9\u00e9e. Elle est, pixel par pixel, identique \u00e0 l'image originale. Mais essayez maintenant de modifier le contenu des variables new_r , new_g , new_b ... et observez le r\u00e9sultat ! 4. Activit\u00e9 finale : changer l'arri\u00e8re-plan d'une image \u2693\ufe0e Vous avez d\u00e9j\u00e0 vu des extraits vid\u00e9os o\u00f9 un acteur tourne devant un fond vert, fond vert qui sera ensuite remplac\u00e9 par une autre incrusatation vid\u00e9o au montage final. Nous sommes maintenant capables de faire (\u00e0 peu pr\u00e8s...) la m\u00eame chose avec quelques lignes de Python. 4.1 Les images de travail \u2693\ufe0e Notre personnage sera l'acteur John Travolta, h\u00e9ros du m\u00e8me confused Travolta . update : vous pouvez aussi travailler avec Bernie Sanders, candidat (malheureux) \u00e0 la primaire d\u00e9mocrate aux US en 2020. Nous disposons donc des images john.bmp et bernie.bmp : et d'une image de m\u00eame taille, hall.png , o\u00f9 vous reconna\u00eetrez le hall du lyc\u00e9e : L'objectif est bien s\u00fbr d'int\u00e9grer John Travolta (ou Bernie Sanders) dans le hall du lyc\u00e9e. 4.2 Fusion des deux images \u2693\ufe0e Nous savons : - parcourir tous les pixels d'une image (avec une double boucle) - r\u00e9cup\u00e9rer la valeur d'un pixel (avec getpixel() ) - modifier la valeur d'un pixel (avec putpixel() ) - faire des tests avec if ... Nous avons donc tous les outils n\u00e9cessaires pour accueillir John Travolta ou Bernie Sanders dans le hall du lyc\u00e9e : \u00e0 vos claviers ! Correction 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img_john = Image . open ( \"john.bmp\" ) img_hall = Image . open ( \"hall.png\" ) for x in range ( 400 ): for y in range ( 400 ): pixel = img_john . getpixel (( x , y )) if pixel != ( 0 , 255 , 0 ): img_hall . putpixel (( x , y ), pixel ) img_hall . show () 5. \u00c9nigme des vacances \u2693\ufe0e En vous inspirant de l'activit\u00e9 pr\u00e9c\u00e9dente, d\u00e9couvrez ce qui se cache derri\u00e8re cette belle image bleue. (enfin, bleue, bleue... est-elle vraiment bleue partout ?) Aide pour d\u00e9marrer la r\u00e9solution de cette \u00e9nigme \u2693\ufe0e Si vous travaillez \u00e0 la maison et que vous ne voulez pouvez pas installer Thonny, utilisez Basthon, tel qu'indiqu\u00e9 plus haut . M\u00e9thode : 1. Faire afficher la valeur du pixel de coordonn\u00e9es (0,0) . 2. Parcourir tous les pixels de l'image : si le pixel de coordonn\u00e9es (x,y) est diff\u00e9rent du pixel de r\u00e9f\u00e9rence (0,0) , alors le colorier en blanc. Spoiler : le d\u00e9but du code","title":"Cr\u00e9ation d'une image num\u00e9rique en Python"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#creation-dune-image-numerique-en-python","text":"","title":"Cr\u00e9ation d'une image num\u00e9rique en Python"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#0-lenvironnement-logiciel-necessaire","text":"","title":"0. L'environnement logiciel n\u00e9cessaire"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#01-option-1-installer-thonny-sur-son-ordinateur","text":"Rendez vous sur la page https://thonny.org/ T\u00e9l\u00e9chargez et installez la version qui correspond \u00e0 votre syst\u00e8me d'exploitation (Windows, Mac, Linux). Ouvrez Thonny et allez dans Outils / G\u00e9rer les paquets. Dans la zone de recherche, tapez \u00abpillow\u00bb puis cliquez sur \u00abRecherchez sur PyPi\u00bb. Installez le paquet \u00abpillow\u00bb qui vous est propos\u00e9.","title":"0.1 Option 1 : installer Thonny sur son ordinateur"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#02-option-2-utiliser-en-ligne-le-site-basthon","text":"Rendez-vous sur la page https://console.basthon.fr/ Remarques : - Pour travailler avec un fichier (par exemple une image) de votre ordinateur, cliquez sur le bouton - Pour avoir un \u00abretour graphique\u00bb (notamment pour voir une image affich\u00e9e en fin de programme par l'instruction img.show() ), cliquez sur le bouton .","title":"0.2 Option 2 : utiliser en ligne le site Basthon"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#1-premier-code","text":"","title":"1. Premier code"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#11-le-code-a-recopier","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from PIL import Image img = Image . new ( \"RGB\" ,( 300 , 200 )) for x in range ( 300 ): for y in range ( 200 ): img . putpixel (( x , y ),( 150 , 150 , 150 )) for a in range ( 100 , 200 ): for b in range ( 50 , 70 ): img . putpixel (( a , b ),( 0 , 212 , 230 )) for k in range ( 250 , 280 ): img . putpixel (( k , 120 ),( 204 , 15 , 0 )) for z in range ( 100 , 150 ): img . putpixel (( 50 , z ),( 4 , 152 , 20 )) img . save ( \"mon_dessin.png\" ) - Copiez-collez ou recopiez le code suivant (si vous \u00eates - pass\u00e9s par repl.it, il est d\u00e9j\u00e0 \u00e9crit). - Enregistrez votre travail dans un fichier (rep\u00e9rez bien \u00e0 quel endroit ce fichier se trouve) - Ex\u00e9cutez ce code (F5 sur Thonny). Un fichier mon_dessin.png est cr\u00e9\u00e9 dans le m\u00eame dossier que votre code python. Votre image cr\u00e9\u00e9e doit \u00eatre celle-ci :","title":"1.1 Le code \u00e0 recopier"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#12-aide-a-la-comprehension-du-code","text":"","title":"1.2 Aide \u00e0 la compr\u00e9hension du code"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#2-des-fonctions-pour-de-jolies-images","text":"Pour l'instant nos pixels sont tous de la m\u00eame couleur, et c'est un peu d\u00e9cevant... Nous allons repartir avec le code ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from PIL import Image largeur = 600 hauteur = 600 img = Image . new ( \"RGB\" ,( largeur , hauteur )) for x in range ( largeur ): for y in range ( hauteur ): r = 255 g = 255 b = 255 img . putpixel (( x , y ),( r , g , b )) img . save ( \"exemple.png\" ) L'image produite est : blanche.","title":"2. Des fonctions pour de jolies images !"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#21-un-peu-beaucoup-daleatoire","text":"Au d\u00e9but du code, rajoutez la ligne 1 from random import randint Cela nous donne le droit d'utiliser la fonction randint() , qui re\u00e7oit deux nombres entiers en param\u00e8tres, et qui renvoie un nombre pseudo-al\u00e9atoire entre ces deux nombres. Voil\u00e0 un simulateur de d\u00e9 \u00e0 6 faces : 1 2 >>> randint(1,6) 4 Exercice 1 Dans le code pr\u00e9c\u00e9dent, remplacer la valeur de chaque composante RGB (actuellement \u00e0 255) par un nombre al\u00e9atoire entre 0 et 255. \u00c0 quoi ressemble l'image produite ? (on appelle cela du bruit blanc )","title":"2.1 Un peu (beaucoup) d'al\u00e9atoire"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#22-les-mathematiques-au-service-de-lesthetique","text":"Nous souhaiterions que la teinte des pixels change en fonction des coordonn\u00e9es (x,y) de celui-ci. Pour cela, nous allons, par exemple, essayer le code suivant : 1 2 3 4 5 6 7 8 9 def f ( x , y ): return x + y for x in range ( largeur ): for y in range ( hauteur ): r = f ( x , y ) g = 255 b = 255 img . putpixel (( x , y ),( r , g , b )) Essayez de comprendre pourquoi l'image poss\u00e8de une grande zone de blanc. Un op\u00e9rateur important : % Nous allons avoir recours \u00e0 un op\u00e9rateur math\u00e9matique tr\u00e8s important en programmation, l'op\u00e9rateur % , appel\u00e9 \u00abmodulo\u00bb : a % b renvoie le reste de la division euclidienne de a par b . Exemple : 1 2 3 4 5 6 >>> 13 % 5 3 >>> 9 % 7 2 >>> 260 % 255 5 Cet op\u00e9rateur est tr\u00e8s souvent utilis\u00e9 pour \u00e9viter \u00e0 une variable de d\u00e9passer une certaine borne. Ainsi, si z est un nombre entier, z % 255 sera un nombre toujours compris dans l'intervalle [0;254] Exercice 2 Reprenez le code pr\u00e9c\u00e9dent et utilisez le modulo intelligemment. Exercice 3 Modifiez la fonction f (faites parler votre imagination) et observez les r\u00e9sultats obtenus. Exercice 3 Modifiez la fonction f afin qu'elle renvoie la distance du point de coordonn\u00e9es (x,y) avec le centre de l'image. (modulo 255 bien s\u00fbr). Admirez votre cr\u00e9ation !","title":"2.2 Les math\u00e9matiques au service de l'esth\u00e9tique"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#3-modifier-la-couleur-dune-image-existante","text":"Nous allons jouer avec les pixels de l'image ci-dessous. T\u00e9l\u00e9chargez l'image ci-dessus (par un clic-droit puis Enregistrez l'image ). Ouvrez Thonny, et enregistrez votre fichier code_fleur.py dans le m\u00eame r\u00e9pertoire que l'image fleur.jpg que vous venez de t\u00e9l\u00e9charger. Copiez-collez ensuite ce code : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from PIL import Image img_base = Image . open ( \"fleur.jpg\" ) img_modif = Image . new ( \"RGB\" , img_base . size ) largeur = img_base . width hauteur = img_base . height for x in range ( largeur ): for y in range ( hauteur ): pixel = img_base . getpixel (( x , y )) r = pixel [ 0 ] g = pixel [ 1 ] b = pixel [ 2 ] new_r = r new_g = g new_b = b new_pixel = ( new_r , new_g , new_b ) img_modif . putpixel (( x , y ), new_pixel ) img_modif . show () img_modif . save ( \"new_fleur.jpg\" ) Ex\u00e9cutez ce code (F5) et observez l'image cr\u00e9\u00e9e. Elle est, pixel par pixel, identique \u00e0 l'image originale. Mais essayez maintenant de modifier le contenu des variables new_r , new_g , new_b ... et observez le r\u00e9sultat !","title":"3. Modifier la couleur d'une image existante"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#4-activite-finale-changer-larriere-plan-dune-image","text":"Vous avez d\u00e9j\u00e0 vu des extraits vid\u00e9os o\u00f9 un acteur tourne devant un fond vert, fond vert qui sera ensuite remplac\u00e9 par une autre incrusatation vid\u00e9o au montage final. Nous sommes maintenant capables de faire (\u00e0 peu pr\u00e8s...) la m\u00eame chose avec quelques lignes de Python.","title":"4. Activit\u00e9 finale : changer l'arri\u00e8re-plan d'une image"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#42-fusion-des-deux-images","text":"Nous savons : - parcourir tous les pixels d'une image (avec une double boucle) - r\u00e9cup\u00e9rer la valeur d'un pixel (avec getpixel() ) - modifier la valeur d'un pixel (avec putpixel() ) - faire des tests avec if ... Nous avons donc tous les outils n\u00e9cessaires pour accueillir John Travolta ou Bernie Sanders dans le hall du lyc\u00e9e : \u00e0 vos claviers ! Correction 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img_john = Image . open ( \"john.bmp\" ) img_hall = Image . open ( \"hall.png\" ) for x in range ( 400 ): for y in range ( 400 ): pixel = img_john . getpixel (( x , y )) if pixel != ( 0 , 255 , 0 ): img_hall . putpixel (( x , y ), pixel ) img_hall . show ()","title":"4.2 Fusion des deux images"},{"location":"Theme1_Photographie_numerique/creation_image_python.html#5-enigme-des-vacances","text":"En vous inspirant de l'activit\u00e9 pr\u00e9c\u00e9dente, d\u00e9couvrez ce qui se cache derri\u00e8re cette belle image bleue. (enfin, bleue, bleue... est-elle vraiment bleue partout ?)","title":"5. \u00c9nigme des vacances"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html","text":"\u00c9tude des passagers du Titanic \u2693\ufe0e 1. Le fichier titanic.csv \u2693\ufe0e T\u00e9l\u00e9chargez le fichier titanic.csv Ouvrez le avec un \u00e9diteur de texte (le Bloc-Notes de Windows, par exemple). Que remarque-t-on sur la structure de ce document ? Les fichiers CSV (pour Comma Separated Values) sont des fichiers-texte (ils ne contiennent aucune mise en forme) utilis\u00e9s pour stocker des donn\u00e9es, s\u00e9par\u00e9es par des virgules (ou des points-virgules, ou des espaces...). 2. Utilisation d'un tableur \u2693\ufe0e Ouvrez LibreOffice Calc Depuis Calc, ouvrez le fichier titanic.csv . Combien y a-t-il de passagers dans cette liste. Cela correspond-il \u00e0 la totalit\u00e9 des passagers enregistr\u00e9s sur le Titanic ? Cliquez sur Donn\u00e9es / Autofiltre et r\u00e9pondez \u00e0 la question suivante : quel est le nom du passager de sexe masculin, \u00e2g\u00e9 de 26 ans, ayant embarqu\u00e9 \u00e0 Cherbourg en 1\u00e8re classe ? 3. Exploitation avec Python \u2693\ufe0e Il est possible d'exploiter en Python les donn\u00e9es d'un fichier csv. On peut, par exemple, utiliser le module csv. 3.1 R\u00e9cup\u00e9ration des donn\u00e9es \u2693\ufe0e Dans Thonny, copiez-coller le code ci-dessous : 1 2 3 4 5 6 7 8 import csv f = open ( 'titanic.csv' , \"r\" , encoding = 'utf-8' ) donnees = csv . DictReader ( f ) passagers = [] for ligne in donnees : passagers . append ( dict ( ligne )) f . close () 2. Ex\u00e9cutez ce code, puis tapez passagers en console. La structure (complexe) de la variable passagers est appel\u00e9e une liste de dictionnaires . Tapez passagers[0] en console et observez le r\u00e9sultat. Tapez passagers[12]['Nom'] en console et observez le r\u00e9sultat. 3.2 D\u00e9but d'analyse \u2693\ufe0e Copiez-collez-ex\u00e9cutez le code ci-dessous : 1 2 3 4 5 s = 0 for passager in passagers : if int ( passager [ \"survivant\" ]) == 1 : s = s + 1 print ( s ) Que calcule ce code ? Modifiez le code ci-dessus pour qu'il donne le nombre de passagers de troisi\u00e8me classe. Miss Louise LAROCHE a-t-elle surv\u00e9cu au naufrage ? 3.3 Fonctions avanc\u00e9es \u2693\ufe0e 3.3.1 Taux de survie en fonction de la classe \u2693\ufe0e Copiez-collez-ex\u00e9cutez le code ci-dessous : 1 2 3 4 5 6 7 8 9 def survie_classe ( classe ): surv = 0 tot = 0 for passager in passagers : if int ( passager [ \"classe\" ]) == classe : tot = tot + 1 if int ( passager [ \"survivant\" ]) == 1 : surv = surv + 1 return surv / tot \u00c0 l'aide de cette fonction, donnez le taux de survie en 1\u00e8re, 2\u00e8me et 3\u00e8me classe. 3.3.2 Taux de survie en fonction du genre \u2693\ufe0e Modifiez le code pr\u00e9c\u00e9dent pour cr\u00e9er une fonction survie_genre(sexe) o\u00f9 sexe sera le param\u00e8tre \"male\" ou \"female\" , rentr\u00e9 par l'utilisateur. Exemple d'appel de la fonction : 1 >>> survie_genre ( \"male\" ) 3.3.3 Taux de survie en fonction du genre ET de la classe \u2693\ufe0e Modifiez le code pr\u00e9c\u00e9dent pour cr\u00e9er une fonction survie_genre_classe(sexe, classe) o\u00f9 - sexe sera le param\u00e8tre \"male\" ou \"female\" - classe sera le param\u00e8tre 1 , 2 ou 3 Exemple d'appel de la fonction : 1 >>> survie_genre_classe ( \"male\" , 2 ) 3.4 Exploitation graphique \u2693\ufe0e 3.4.1 Pyramide des \u00e2ges totale \u2693\ufe0e Le code suivant permet de g\u00e9n\u00e9rer la pyramide des \u00e2ges de la totalit\u00e9 des passagers, en faisant appara\u00eetre d'une couleur diff\u00e9rente les survivants et les disparus. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import matplotlib.pyplot as plt cumul_age = [ 0 ] * 81 points = [] for p in passagers : age = int ( p [ \"age\" ]) cumul_age [ age ] += 1 points . append (( age , cumul_age [ age ], p [ \"survivant\" ])) X = [ k [ 0 ] for k in points if k [ 2 ] == '1' ] Y = [ k [ 1 ] for k in points if k [ 2 ] == '1' ] plt . plot ( X , Y , 'bs' , label = 'survivant' , markersize = 2 ) X = [ k [ 0 ] for k in points if k [ 2 ] == '0' ] Y = [ k [ 1 ] for k in points if k [ 2 ] == '0' ] plt . plot ( X , Y , 'rs' , label = 'disparu' , markersize = 2 ) plt . xlabel ( '\u00e2ge des passagers' ) plt . ylabel ( 'nombre de passagers' ) plt . legend ( loc = 'upper right' ) plt . title ( 'Pyramide des \u00e2ges : totalit\u00e9 des passagers' ) plt . show () 3.4.2 Pyramide des \u00e2ges par classe \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import matplotlib.pyplot as plt cumul_age = [ 0 ] * 81 points = [] for p in passagers : if p [ 'classe' ] == '1' : age = int ( p [ \"age\" ]) cumul_age [ age ] += 1 points . append (( age , cumul_age [ age ], p [ \"survivant\" ])) X = [ k [ 0 ] for k in points if k [ 2 ] == '1' ] Y = [ k [ 1 ] for k in points if k [ 2 ] == '1' ] plt . plot ( X , Y , 'bs' , label = 'survivant' , markersize = 2 ) X = [ k [ 0 ] for k in points if k [ 2 ] == '0' ] Y = [ k [ 1 ] for k in points if k [ 2 ] == '0' ] plt . plot ( X , Y , 'rs' , label = 'disparu' , markersize = 2 ) plt . xlabel ( '\u00e2ge des passagers' ) plt . ylabel ( 'nombre de passagers' ) plt . legend ( loc = 'upper right' ) plt . title ( 'Pyramide des \u00e2ges : classe 1' ) plt . show () En faisant de l\u00e9g\u00e8res modifications, on obtient aussi :","title":"\u00c9tude des passagers du Titanic"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#etude-des-passagers-du-titanic","text":"","title":"\u00c9tude des passagers du Titanic"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#1-le-fichier-titaniccsv","text":"T\u00e9l\u00e9chargez le fichier titanic.csv Ouvrez le avec un \u00e9diteur de texte (le Bloc-Notes de Windows, par exemple). Que remarque-t-on sur la structure de ce document ? Les fichiers CSV (pour Comma Separated Values) sont des fichiers-texte (ils ne contiennent aucune mise en forme) utilis\u00e9s pour stocker des donn\u00e9es, s\u00e9par\u00e9es par des virgules (ou des points-virgules, ou des espaces...).","title":"1. Le fichier titanic.csv"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#2-utilisation-dun-tableur","text":"Ouvrez LibreOffice Calc Depuis Calc, ouvrez le fichier titanic.csv . Combien y a-t-il de passagers dans cette liste. Cela correspond-il \u00e0 la totalit\u00e9 des passagers enregistr\u00e9s sur le Titanic ? Cliquez sur Donn\u00e9es / Autofiltre et r\u00e9pondez \u00e0 la question suivante : quel est le nom du passager de sexe masculin, \u00e2g\u00e9 de 26 ans, ayant embarqu\u00e9 \u00e0 Cherbourg en 1\u00e8re classe ?","title":"2. Utilisation d'un tableur"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#3-exploitation-avec-python","text":"Il est possible d'exploiter en Python les donn\u00e9es d'un fichier csv. On peut, par exemple, utiliser le module csv.","title":"3. Exploitation avec Python"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#31-recuperation-des-donnees","text":"Dans Thonny, copiez-coller le code ci-dessous : 1 2 3 4 5 6 7 8 import csv f = open ( 'titanic.csv' , \"r\" , encoding = 'utf-8' ) donnees = csv . DictReader ( f ) passagers = [] for ligne in donnees : passagers . append ( dict ( ligne )) f . close () 2. Ex\u00e9cutez ce code, puis tapez passagers en console. La structure (complexe) de la variable passagers est appel\u00e9e une liste de dictionnaires . Tapez passagers[0] en console et observez le r\u00e9sultat. Tapez passagers[12]['Nom'] en console et observez le r\u00e9sultat.","title":"3.1 R\u00e9cup\u00e9ration des donn\u00e9es"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#32-debut-danalyse","text":"Copiez-collez-ex\u00e9cutez le code ci-dessous : 1 2 3 4 5 s = 0 for passager in passagers : if int ( passager [ \"survivant\" ]) == 1 : s = s + 1 print ( s ) Que calcule ce code ? Modifiez le code ci-dessus pour qu'il donne le nombre de passagers de troisi\u00e8me classe. Miss Louise LAROCHE a-t-elle surv\u00e9cu au naufrage ?","title":"3.2 D\u00e9but d'analyse"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#33-fonctions-avancees","text":"","title":"3.3 Fonctions avanc\u00e9es"},{"location":"Theme4_Donnees_structurees/etude_du_titanic.html#34-exploitation-graphique","text":"","title":"3.4 Exploitation graphique"}]}